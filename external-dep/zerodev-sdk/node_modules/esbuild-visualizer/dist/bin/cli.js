#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const open_1 = __importDefault(require("open"));
const yargs_1 = __importDefault(require("yargs"));
const helpers_1 = require("yargs/helpers");
const template_types_1 = __importDefault(require("../plugin/template-types"));
const warn_1 = require("../plugin/warn");
const index_1 = require("../plugin/index");
const argv = (0, yargs_1.default)((0, helpers_1.hideBin)(process.argv))
    .strict()
    .option("filename", {
    describe: "Output file name",
    type: "string",
    default: "./stats.html",
})
    .option("title", {
    describe: "Output file title",
    type: "string",
    default: "EsBuild Visualizer",
})
    .option("template", {
    describe: "Template type",
    type: "string",
    choices: template_types_1.default,
    default: "treemap",
})
    .option("metadata", {
    describe: "Input file name",
    string: true,
    default: "./metadata.json",
})
    .option("open", {
    describe: "Open file in browser",
    boolean: true,
    default: false,
})
    .help()
    .parseSync();
const run = async (args) => {
    const textContent = await fs_1.promises.readFile(args.metadata, { encoding: "utf-8" });
    const jsonContent = JSON.parse(textContent);
    const fileContent = await (0, index_1.visualizer)(jsonContent, {
        title: args.title,
        template: args.template,
    });
    await fs_1.promises.mkdir(path_1.default.dirname(args.filename), { recursive: true });
    await fs_1.promises.writeFile(args.filename, fileContent);
    if (args.open) {
        await (0, open_1.default)(args.filename);
    }
};
run(argv).catch((err) => {
    (0, warn_1.warn)(err.stack);
    process.exit(1);
});
