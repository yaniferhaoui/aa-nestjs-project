"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visualizer = void 0;
const version_1 = require("./version");
const module_mapper_1 = require("./module-mapper");
const data_1 = require("./data");
const render_template_1 = require("./render-template");
const visualizer = async (metadata, opts = {}) => {
    var _a, _b;
    const title = (_a = opts.title) !== null && _a !== void 0 ? _a : "EsBuild Visualizer";
    const template = (_b = opts.template) !== null && _b !== void 0 ? _b : "treemap";
    const projectRoot = "";
    const renderedModuleToInfo = (id, mod) => {
        const result = {
            id,
            gzipLength: 0,
            brotliLength: 0,
            renderedLength: mod.bytesInOutput,
        };
        return result;
    };
    const roots = [];
    const mapper = new module_mapper_1.ModuleMapper(projectRoot);
    // collect trees
    for (const [bundleId, bundle] of Object.entries(metadata.outputs)) {
        const modules = Object.entries(bundle.inputs).map(([id, mod]) => renderedModuleToInfo(id, mod));
        const tree = (0, data_1.buildTree)(bundleId, modules, mapper);
        roots.push(tree);
    }
    const getModuleInfo = (bundle) => (moduleId) => {
        var _a, _b, _c, _d;
        const input = (_a = metadata.inputs) === null || _a === void 0 ? void 0 : _a[moduleId];
        const imports = input === null || input === void 0 ? void 0 : input.imports.map((i) => i.path);
        return {
            renderedLength: (_d = (_c = (_b = bundle.inputs) === null || _b === void 0 ? void 0 : _b[moduleId]) === null || _c === void 0 ? void 0 : _c.bytesInOutput) !== null && _d !== void 0 ? _d : 0,
            importedIds: imports !== null && imports !== void 0 ? imports : [],
            dynamicallyImportedIds: [],
            isEntry: bundle.entryPoint === moduleId,
            isExternal: false,
        };
    };
    for (const [, bundle] of Object.entries(metadata.outputs)) {
        if (bundle.entryPoint == null)
            continue;
        (0, data_1.addLinks)(bundle.entryPoint, getModuleInfo(bundle), mapper);
    }
    const tree = (0, data_1.mergeTrees)(roots);
    const data = {
        version: version_1.version,
        tree,
        nodeParts: mapper.getNodeParts(),
        nodeMetas: mapper.getNodeMetas(),
        env: {},
        options: {
            gzip: false,
            brotli: false,
            sourcemap: false,
        },
    };
    const fileContent = await (0, render_template_1.renderTemplate)(template, {
        title,
        data,
    });
    return fileContent;
};
exports.visualizer = visualizer;
